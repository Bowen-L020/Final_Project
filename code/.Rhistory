period_1_virulent  <- Final_data_total_pop |>
filter(date > as.Date("2020-01-25") & date < as.Date("2021-01-01"))|>
summarise(
total_cases = sum(cases, na.rm = TRUE),
total_deaths = sum(deaths, na.rm = TRUE),
# Take mean population if population might differ across year
avg_population = mean(total_population, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
case_rate = (total_cases / avg_population) * 100000,
death_rate = (total_deaths / avg_population) * 100000
)
period_2_virulent  <- Final_data_total_pop |>
filter(date > as.Date("2021-01-01") & date < as.Date("2021-06-25"))|>
summarise(
total_cases = sum(cases, na.rm = TRUE),
total_deaths = sum(deaths, na.rm = TRUE),
# Take mean population if population might differ across year
avg_population = mean(total_population, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
case_rate = (total_cases / avg_population) * 100000,
death_rate = (total_deaths / avg_population) * 100000
)
period_3_virulent  <- Final_data_total_pop |>
filter(date > as.Date("2021-06-25") & date < as.Date("2021-12-25"))|>
summarise(
total_cases = sum(cases, na.rm = TRUE),
total_deaths = sum(deaths, na.rm = TRUE),
# Take mean population if population might differ across year
avg_population = mean(total_population, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
case_rate = (total_cases / avg_population) * 100000,
death_rate = (total_deaths / avg_population) * 100000
)
period_4_virulent  <- Final_data_total_pop |>
filter(date > as.Date("2021-12-25") & date < as.Date("2022-04-30"))|>
summarise(
total_cases = sum(cases, na.rm = TRUE),
total_deaths = sum(deaths, na.rm = TRUE),
# Take mean population if population might differ across year
avg_population = mean(total_population, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
case_rate = (total_cases / avg_population) * 100000,
death_rate = (total_deaths / avg_population) * 100000
)
period_5_virulent  <- Final_data_total_pop |>
filter(date > as.Date("2022-04-30") & date < as.Date("2023-05-13"))|>
summarise(
total_cases = sum(cases, na.rm = TRUE),
total_deaths = sum(deaths, na.rm = TRUE),
# Take mean population if population might differ slightly across states/dates
avg_population = mean(total_population, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
case_rate = (total_cases / avg_population) * 100000,
death_rate = (total_deaths / avg_population) * 100000
)
library(dplyr)
library(ggplot2)
# Combine data from all four periods into one data frame
virulence_data = bind_rows(
period_1_virulent  |> mutate(period = "Period 1"),
period_2_virulent  |> mutate(period = "Period 2"),
period_3_virulent  |> mutate(period = "Period 3"),
period_4_virulent  |> mutate(period = "Period 4"),
period_5_virulent  |> mutate(period = "Period 5")
)|>
mutate(period = factor(period, levels = c("Period 1", "Period 2", "Period 3", "Period 4", "Period 5")))
# Case Rate Plot
case_rate_plot = ggplot(virulence_data, aes(x = period, y = case_rate, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "steelblue", size = 2) +
labs(
title = "COVID-19 Case Rate Across Five Period",
x = "Period",
y = "Case Rate per 100,000"
) +
theme_minimal()
# Death Rate Plot
death_rate_plot = ggplot(virulence_data, aes(x = period, y = death_rate, group = 1)) +
geom_line(color = "darkred", size = 1) +
geom_point(color = "darkred", size = 2) +
labs(
title = "COVID-19 Death Rate Across Five Period",
x = "Period",
y = "Death Rate per 100,000"
) +
theme_minimal()
virulence_plot = (case_rate_plot | death_rate_plot)+
plot_annotation(
title = "Fig 3. trends in COVID-19 case and death rates"
) &
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
library(gridExtra)
grid.arrange(case_rate_pic, death_rate_pic, ncol = 2)
grid.arrange(p1, p2, ncol = 2)
grid.arrange(p3, p4, ncol = 2)
grid.arrange(p5,ncol=1)
grid.arrange(case_rate_plot, death_rate_plot, ncol = 2)
library(readxl)
library(dplyr)
library(tidyr)
library(tidyverse)
file_path = "/Users/liubowen/Desktop/BST260/Final_Project/data/raw-data/NST-EST2023-POP.xlsx"
data = read_excel(file_path, sheet = "NST-EST2023-POP", skip = 8)
data = data |>
select(-2)
colnames(data) = c("state_name", "2020", "2021", "2022", "2023")
pop_census = data |>
pivot_longer(cols = starts_with("20"), names_to = "year", values_to = "population")|>
mutate(state_name = str_remove(state_name, "^\\."))
pop_census = pop_census |>
mutate(state = state.abb[match(state_name, state.name)])|>
mutate(state = case_when (
state_name == "Puerto Rico" ~ "PR",
state_name == "District of Columbia" ~ "DC",
TRUE ~ state))|>
mutate(year = as.numeric(year))|>
filter(!is.na(state))
unique_state_count <- pop_census |>
summarise(unique_states = n_distinct(state))
print(unique_state_count)
library(tidyverse)
library(httr2)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_url_query("$limit" = 10000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE)
get_cdc_data <- function(api){
request(api) |>
req_url_query("$limit" = 10000000) |>
req_perform() |>
resp_body_json(simplifyVector = TRUE)
}
cases_raw <- get_cdc_data("https://data.cdc.gov/resource/pwn4-m3yp.json")
library(lubridate)
COVID_cases <- cases_raw |> mutate(cases = parse_number(new_cases),
date = as_date(ymd_hms(end_date))) |>
filter(state %in% pop_census$state) |>
mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date)) |>
select(state, mmwr_year, mmwr_week, cases) |>
arrange(state, mmwr_year, mmwr_week)|>
na.omit()
unique_state_count <- COVID_cases |>
summarise(unique_states = n_distinct(state))
print(unique_state_count)
deaths_raw = get_cdc_data("https://data.cdc.gov/resource/r8kw-7aab.json")
deaths = deaths_raw |>
filter(state %in% pop_census$state_name) |>
mutate(end_date = as_date(end_date),
mmwr_year = epiyear(end_date)) |>
rename(deaths_prov = covid_19_deaths) |>
mutate(mmwr_week = parse_number(mmwr_week),
deaths = parse_number(deaths_prov))|>
select(state, mmwr_week, mmwr_year, deaths)|>
na.omit()
unique_state_count <- deaths |>
summarise(unique_states = n_distinct(state))
print(unique_state_count)
library(lubridate)
library(dplyr)
library(epitools)
all_dates <- data.frame(date = seq(make_date(2020, 1, 25),
make_date(2023, 12, 31),
by = "week")) |>
mutate(date = ceiling_date(date, unit = "week", week_start = 7) - days(1)) |>
mutate(mmwr_year = epiyear(date), mmwr_week = epiweek(date))
head(all_dates)
tail(all_dates)
dates_and_pop = cross_join(all_dates, data.frame(state =unique(pop_census$state)))|>
left_join(pop_census, by = c("state","mmwr_year" = "year"))
Final_data = dates_and_pop|>
left_join(COVID_cases, by = c("state", "mmwr_week", "mmwr_year"))|>
left_join(deaths, by = c("state_name" = "state", "mmwr_week","mmwr_year"))|>
na.omit()
# Step 1: Summarize the total population by year
total_population = pop_census |>
group_by(year) |>
summarise(total_population = sum(population),
.groups = "drop")
# Step 2: Summarize the total cases and deaths by month
Month_data = Final_data |>
mutate(month = floor_date(date, "month"),
year = year(month)) |>
group_by(month) |>
summarise(
cases = sum(cases, na.rm = TRUE),
deaths = sum(deaths, na.rm = TRUE),
year = unique(year),
.groups = "drop"
)
# Step 3: Join the population data with the summarized monthly data
Month_data = Month_data |>
left_join(total_population, by = "year")
# Step 4: Calculate rates
Month_data = Month_data |>
mutate(
cases_rate = (cases / total_population) * 10^5,
deaths_rate = (deaths / total_population) * 10^5
)
case_rate_pic = ggplot(Month_data, aes(x = month, y = cases_rate)) +
geom_line(color = "blue") +
geom_point()+
geom_col(alpha = 0.4, fill = "blue") +
scale_x_date(
date_labels = "%b %Y",
date_breaks = "1 months"
) +
labs(
title = "Monthly COVID-19 Case Rate (Country Level)",
x = "Month",
y = "Case Rate per 100,000 Population"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
death_rate_pic = ggplot(Month_data, aes(x = month, y = deaths_rate)) +
geom_line(color = "red") +
geom_point()+
geom_col(alpha = 0.4, fill = "red") +
scale_x_date(
date_labels = "%b %Y",
date_breaks = "1 months"
) +
labs(
title = "Monthly COVID-19 Death Rate (Country Level)",
x = "Month",
y = "Death Rate per 100,000 Population"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(patchwork)
(case_rate_pic | death_rate_pic)+
plot_annotation(title = "Fig 1")&
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
ggplot(Month_data) +
geom_line(aes(x = month, y = cases_rate), color = "blue") +
geom_line(aes(x = month, y = deaths_rate * 200), color = "red") +
scale_y_continuous(
name = "Case Rate per 100,000",
sec.axis = sec_axis(~./200, name = "Death Rate per 100,000")
) +
labs(title = "Fig1_1 Monthly COVID-19 Case and Death Rates",
x = "Month") +
theme_minimal() +
scale_x_date(date_labels = "%b %Y", date_breaks = "2 months") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(lubridate)
state_death_rates_period_1 = Final_data |>
filter(date > as.Date("2020-01-25") & date < as.Date("2021-01-01"))|>
group_by(state) |>
summarise(
total_deaths = sum(deaths, na.rm = TRUE),
population = mean(population), # to keep consistency, since each year population is difference
.groups = "drop"
)|>
mutate(death_rate = (total_deaths / population) * 10^5)|>
arrange(desc(death_rate))
library(dplyr)
library(lubridate)
state_death_rates_period_2 = Final_data |>
filter(date > as.Date("2021-01-01") & date < as.Date("2021-06-25"))|>
group_by(state) |>
summarise(
total_deaths = sum(deaths, na.rm = TRUE),
population = mean(population), # to keep consistency, since each year population is difference
.groups = "drop"
)|>
mutate(death_rate = (total_deaths / population) * 10^5)|>
arrange(desc(death_rate))
library(dplyr)
library(lubridate)
state_death_rates_period_3 = Final_data |>
filter(date > as.Date("2021-06-25") & date < as.Date("2021-12-25"))|>
group_by(state) |>
summarise(
total_deaths = sum(deaths, na.rm = TRUE),
population = mean(population), # to keep consistency, since each year population is difference
.groups = "drop"
)|>
mutate(death_rate = (total_deaths / population) * 10^5)|>
arrange(desc(death_rate))
library(dplyr)
library(lubridate)
state_death_rates_period_4 = Final_data |>
filter(date > as.Date("2021-12-25") & date < as.Date("2022-04-30"))|>
group_by(state) |>
summarise(
total_deaths = sum(deaths, na.rm = TRUE),
population = mean(population), # to keep consistency, since each year population is difference
.groups = "drop"
)|>
mutate(death_rate = (total_deaths / population) * 10^5)|>
arrange(desc(death_rate))
library(dplyr)
library(lubridate)
state_death_rates_period_5 = Final_data |>
filter(date > as.Date("2022-04-30") & date < as.Date("2023-05-13"))|>
group_by(state) |>
summarise(
total_deaths = sum(deaths, na.rm = TRUE),
population = mean(population), # to keep consistency, since each year population is difference
.groups = "drop"
)|>
mutate(death_rate = (total_deaths / population) * 10^5)|>
arrange(desc(death_rate))
library(dplyr)
library(ggplot2)
library(patchwork)
# Period 1 Plot: reorder states by descending death_rate
p1 = state_death_rates_period_1 |>
ggplot(aes(x = reorder(state, death_rate), y = death_rate)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(
title = "Period 1",
subtitle = "(2020-01-25 to 2021-01-01)",
x = "State",
y = "Death Rate per 100,000"
) +
theme_minimal()+
theme(axis.text.y = element_text(size = 3))
# Period 2 Plot
p2 = state_death_rates_period_2 |>
ggplot(aes(x = reorder(state, death_rate), y = death_rate)) +
geom_col(fill = "darkorange") +
coord_flip() +
labs(
title = "Period 2",
subtitle = "(2021-01-01 to 2021-06-25)",
x = "State",
y = "Death Rate per 100,000"
) +
theme_minimal()+
theme(axis.text.y = element_text(size = 3))
# Period 3 Plot
p3 = state_death_rates_period_3 |>
ggplot(aes(x = reorder(state, death_rate), y = death_rate)) +
geom_col(fill = "forestgreen") +
coord_flip() +
labs(
title = "Period 3",
subtitle = "(2021-06-25 to 2021-12-25)",
x = "State",
y = "Death Rate per 100,000"
) +
theme_minimal()+
theme(axis.text.y = element_text(size = 3))
# Period 4 Plot
p4 = state_death_rates_period_4 |>
ggplot(aes(x = reorder(state, death_rate), y = death_rate)) +
geom_col(fill = "firebrick") +
coord_flip() +
labs(
title = "Period 4",
subtitle = "(2021-12-25 to 2022-04-30)",
x = "State",
y = "Death Rate per 100,000"
) +
theme_minimal()+
theme(axis.text.y = element_text(size = 3))
p5 = state_death_rates_period_5 |>
ggplot(aes(x = reorder(state, death_rate), y = death_rate)) +
geom_col(fill = "yellow") +
coord_flip() +
labs(
title = "Period 5",
subtitle = "(2022-04-30 to 2023-05-13)",
x = "State",
y = "Death Rate per 100,000"
) +
theme_minimal()+
theme(axis.text.y = element_text(size = 3))
combined_plot = (p1 | p2) / (p3 | p4 | p5) +
plot_annotation(
title = "Fig 2. State-Level COVID-19 Death Rates Across Different Periods"
) &
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
combined_plot
library(lubridate)
Final_data = Final_data |>
mutate(calendar_year = year(date))
Final_data_total_pop = Final_data |>
left_join(total_population, by = c("calendar_year" = "year"))|>
select(-calendar_year)
period_1_virulent  <- Final_data_total_pop |>
filter(date > as.Date("2020-01-25") & date < as.Date("2021-01-01"))|>
summarise(
total_cases = sum(cases, na.rm = TRUE),
total_deaths = sum(deaths, na.rm = TRUE),
# Take mean population if population might differ across year
avg_population = mean(total_population, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
case_rate = (total_cases / avg_population) * 100000,
death_rate = (total_deaths / avg_population) * 100000
)
period_2_virulent  <- Final_data_total_pop |>
filter(date > as.Date("2021-01-01") & date < as.Date("2021-06-25"))|>
summarise(
total_cases = sum(cases, na.rm = TRUE),
total_deaths = sum(deaths, na.rm = TRUE),
# Take mean population if population might differ across year
avg_population = mean(total_population, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
case_rate = (total_cases / avg_population) * 100000,
death_rate = (total_deaths / avg_population) * 100000
)
period_3_virulent  <- Final_data_total_pop |>
filter(date > as.Date("2021-06-25") & date < as.Date("2021-12-25"))|>
summarise(
total_cases = sum(cases, na.rm = TRUE),
total_deaths = sum(deaths, na.rm = TRUE),
# Take mean population if population might differ across year
avg_population = mean(total_population, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
case_rate = (total_cases / avg_population) * 100000,
death_rate = (total_deaths / avg_population) * 100000
)
period_4_virulent  <- Final_data_total_pop |>
filter(date > as.Date("2021-12-25") & date < as.Date("2022-04-30"))|>
summarise(
total_cases = sum(cases, na.rm = TRUE),
total_deaths = sum(deaths, na.rm = TRUE),
# Take mean population if population might differ across year
avg_population = mean(total_population, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
case_rate = (total_cases / avg_population) * 100000,
death_rate = (total_deaths / avg_population) * 100000
)
period_5_virulent  <- Final_data_total_pop |>
filter(date > as.Date("2022-04-30") & date < as.Date("2023-05-13"))|>
summarise(
total_cases = sum(cases, na.rm = TRUE),
total_deaths = sum(deaths, na.rm = TRUE),
# Take mean population if population might differ slightly across states/dates
avg_population = mean(total_population, na.rm = TRUE),
.groups = "drop"
) |>
mutate(
case_rate = (total_cases / avg_population) * 100000,
death_rate = (total_deaths / avg_population) * 100000
)
library(dplyr)
library(ggplot2)
# Combine data from all four periods into one data frame
virulence_data = bind_rows(
period_1_virulent  |> mutate(period = "Period 1"),
period_2_virulent  |> mutate(period = "Period 2"),
period_3_virulent  |> mutate(period = "Period 3"),
period_4_virulent  |> mutate(period = "Period 4"),
period_5_virulent  |> mutate(period = "Period 5")
)|>
mutate(period = factor(period, levels = c("Period 1", "Period 2", "Period 3", "Period 4", "Period 5")))
# Case Rate Plot
case_rate_plot = ggplot(virulence_data, aes(x = period, y = case_rate, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "steelblue", size = 2) +
labs(
title = "COVID-19 Case Rate Across Five Periods",
x = "Period",
y = "Case Rate per 100,000"
) +
theme_minimal()
# Death Rate Plot
death_rate_plot = ggplot(virulence_data, aes(x = period, y = death_rate, group = 1)) +
geom_line(color = "darkred", size = 1) +
geom_point(color = "darkred", size = 2) +
labs(
title = "COVID-19 Death Rate Across Five Periods",
x = "Period",
y = "Death Rate per 100,000"
) +
theme_minimal()
(case_rate_plot | death_rate_plot)+
plot_annotation(
title = "Fig 3. trends in COVID-19 case and death rates"
) &
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
library(tidyr)
long_data <- virulence_data %>%
pivot_longer(cols = c(case_rate, death_rate), names_to = "RateType", values_to = "Rate")
ggplot(long_data, aes(x = period, y = RateType, fill = Rate)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "lightblue", high = "darkred") +
labs(title = "COVID-19 Rates Across Periods (Heatmap)",
x = "Period", y = "Rate Type", fill = "Rate per 100k") +
theme_minimal()
